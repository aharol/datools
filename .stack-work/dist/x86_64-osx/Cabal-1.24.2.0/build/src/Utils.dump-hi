
==================== FINAL INTERFACE ====================
2017-02-12 07:24:45.382025 UTC

interface datools-0.1.0.0-Liiqe4AOY4e5U6XV99USYi:Utils 8002
  interface hash: a39cf64295001d3e3ee3cdc3ed59d71a
  ABI hash: 3a63083e4e90f581c249d30e406c8175
  export-list hash: 68731520d8aeb6aa5b1ea110f86ee19f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Utils.mean
  Utils.median
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
65f763cefbf831522f0f1d0db6e7c38b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Utils.$trModule2 Utils.$trModule1) -}
9cf313e3792ddd6061c79a408e6839e0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Utils"#) -}
918d61193c0599ff6143208e4d3f831c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "datools-0.1.0.0-Liiqe4AOY4e5U6XV99USYi"#) -}
b2978ac6867b3439661f2ef067ead248
  mean :: (GHC.Real.Real a, GHC.Real.Fractional b) => [a] -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(1*U,A,1*C1(U))><S(LC(C(S))LL),U(1*U(C(C1(U)),A,A,A,A,A,C(U)),1*C1(C1(U)),A,1*C1(U))><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dReal :: GHC.Real.Real a)
                   ($dFractional :: GHC.Real.Fractional b)
                   (eta :: [a]) ->
                 GHC.Real./
                   @ b
                   $dFractional
                   (GHC.Real.fromRational
                      @ b
                      $dFractional
                      (GHC.Real.toRational
                         @ a
                         $dReal
                         (let {
                            $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                          } in
                          let {
                            k :: a -> a -> a = GHC.Num.+ @ a $dNum
                          } in
                          letrec {
                            go :: [a] -> a -> a {- Arity: 2, Strictness: <S,1*U><L,U> -}
                            = \ (ds :: [a]) (eta1 :: a) ->
                              case ds of wild { [] -> eta1 : y ys -> go ys (k eta1 y) }
                          } in
                          go eta (GHC.Num.fromInteger @ a $dNum Utils.mean1))))
                   (Data.OldList.genericLength
                      @ b
                      @ a
                      (GHC.Real.$p1Fractional @ b $dFractional)
                      eta)) -}
a7f06148624fb477e7d3ee12d4619702
  mean1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
eba026c3de961b758808cc8fd0ae632f
  median :: (GHC.Real.Real a, GHC.Real.Fractional a) => [a] -> a
  {- Arity: 3,
     Strictness: <L,U(1*U,1*U(A,1*C(C1(U)),A,A,A,A,A,A),A)><L,1*U(A,1*C1(C1(U)),A,A)><S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

